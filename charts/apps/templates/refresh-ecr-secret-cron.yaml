apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecr-secret-refresh
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: ecr-secret-manager
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "patch", "get", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: default
  name: ecr-secret-refresh-binding
subjects:
  - kind: ServiceAccount
    name: ecr-secret-refresh
    namespace: default
roleRef:
  kind: Role
  name: ecr-secret-manager
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ecr-secret-refresh
  namespace: default
spec:
  schedule: "* * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: ecr-secret-refresh
          containers:
            - name: ecr-secret-refresh
              image: amazon/aws-cli
              command:
                - /bin/sh
                - -c
                - |
                  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
                  echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
                  install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

                  aws ecr get-login-password --region {{ .Values.aws.region }} | \
                  kubectl create secret docker-registry ecr-registry-secret \
                    --docker-server={{ .Values.aws.accountId }}.dkr.ecr.{{ .Values.aws.region }}.amazonaws.com \
                    --docker-username=AWS \
                    --docker-password-stdin \
                    --namespace=default --dry-run=client -o yaml | \
                  kubectl apply -f -
              env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: awssm-secret
                      key: access-key
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: awssm-secret
                      key: secret-access-key
                - name: AWS_DEFAULT_REGION
                  value: {{ .Values.aws.region }}
          restartPolicy: OnFailure
